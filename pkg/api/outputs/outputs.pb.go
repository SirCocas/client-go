// Code generated by protoc-gen-go. DO NOT EDIT.
// source: outputs.proto

package outputs

import (
	context "context"
	fmt "fmt"
	schema "github.com/falcosecurity/client-go/pkg/api/schema"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The `request` message is the logical representation of the request model.
// It is the input of the `outputs` service.
// It is used to configure the kind of subscription to the gRPC streaming server.
//
// By default the request asks to the server to only receive the accumulated events.
// In case you want to wait indefinitely for new events to come set the keepalive option to true.
type Request struct {
	Keepalive            bool     `protobuf:"varint,1,opt,name=keepalive,proto3" json:"keepalive,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d51c8ffe2768f30, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetKeepalive() bool {
	if m != nil {
		return m.Keepalive
	}
	return false
}

// The `response` message is the logical representation of the output model.
// It contains all the elements that Falco emits in an output along with the
// definitions for priorities and source.
type Response struct {
	Time                 *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Priority             schema.Priority      `protobuf:"varint,2,opt,name=priority,proto3,enum=falco.schema.Priority" json:"priority,omitempty"`
	Source               schema.Source        `protobuf:"varint,3,opt,name=source,proto3,enum=falco.schema.Source" json:"source,omitempty"`
	Rule                 string               `protobuf:"bytes,4,opt,name=rule,proto3" json:"rule,omitempty"`
	Output               string               `protobuf:"bytes,5,opt,name=output,proto3" json:"output,omitempty"`
	OutputFields         map[string]string    `protobuf:"bytes,6,rep,name=output_fields,json=outputFields,proto3" json:"output_fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Hostname             string               `protobuf:"bytes,7,opt,name=hostname,proto3" json:"hostname,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d51c8ffe2768f30, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Response) GetPriority() schema.Priority {
	if m != nil {
		return m.Priority
	}
	return schema.Priority_EMERGENCY
}

func (m *Response) GetSource() schema.Source {
	if m != nil {
		return m.Source
	}
	return schema.Source_SYSCALL
}

func (m *Response) GetRule() string {
	if m != nil {
		return m.Rule
	}
	return ""
}

func (m *Response) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *Response) GetOutputFields() map[string]string {
	if m != nil {
		return m.OutputFields
	}
	return nil
}

func (m *Response) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "falco.outputs.request")
	proto.RegisterType((*Response)(nil), "falco.outputs.response")
	proto.RegisterMapType((map[string]string)(nil), "falco.outputs.response.OutputFieldsEntry")
}

func init() { proto.RegisterFile("outputs.proto", fileDescriptor_2d51c8ffe2768f30) }

var fileDescriptor_2d51c8ffe2768f30 = []byte{
	// 383 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0x4b, 0x8b, 0xdb, 0x30,
	0x18, 0xc4, 0x79, 0xf8, 0xa1, 0x24, 0xa5, 0x15, 0x21, 0x35, 0xa6, 0x50, 0x93, 0x4b, 0x5d, 0x68,
	0xe5, 0xe2, 0xf6, 0x50, 0x4a, 0xa1, 0x50, 0x68, 0x7b, 0x6b, 0x41, 0xf4, 0xd4, 0x4b, 0x71, 0xbc,
	0x5f, 0x1c, 0x11, 0xdb, 0xd2, 0xea, 0x11, 0xc8, 0x0f, 0xdf, 0xfb, 0x12, 0xc9, 0xce, 0x6e, 0x08,
	0x7b, 0xd3, 0xcc, 0x37, 0x9f, 0x66, 0x34, 0x42, 0x0b, 0x6e, 0xb4, 0x30, 0x5a, 0x11, 0x21, 0xb9,
	0xe6, 0x78, 0xb1, 0x2d, 0x9b, 0x8a, 0x93, 0x9e, 0x4c, 0x5e, 0xd7, 0x9c, 0xd7, 0x0d, 0xe4, 0x76,
	0xb8, 0x31, 0xdb, 0x5c, 0xb3, 0x16, 0x94, 0x2e, 0x5b, 0xe1, 0xf4, 0xc9, 0x5c, 0x55, 0x3b, 0x68,
	0x4b, 0x87, 0xd6, 0x6f, 0x50, 0x20, 0xe1, 0xd6, 0x80, 0xd2, 0xf8, 0x15, 0x8a, 0xf6, 0x00, 0xa2,
	0x6c, 0xd8, 0x01, 0x62, 0x2f, 0xf5, 0xb2, 0x90, 0x3e, 0x10, 0xeb, 0xbb, 0x11, 0x0a, 0x25, 0x28,
	0xc1, 0x3b, 0x05, 0x98, 0xa0, 0xc9, 0xe9, 0x5a, 0xab, 0x9a, 0x15, 0x09, 0x71, 0x9e, 0x64, 0xf0,
	0x24, 0x7f, 0x07, 0x4f, 0x6a, 0x75, 0xb8, 0x40, 0xa1, 0x90, 0x8c, 0x4b, 0xa6, 0x8f, 0xf1, 0x28,
	0xf5, 0xb2, 0x67, 0xc5, 0x8a, 0xb8, 0xd8, 0xe7, 0x30, 0x6e, 0x4a, 0xcf, 0x3a, 0xfc, 0x0e, 0xf9,
	0x8a, 0x1b, 0x59, 0x41, 0x3c, 0xb6, 0x1b, 0xcb, 0xcb, 0x0d, 0x37, 0xa3, 0xbd, 0x06, 0x63, 0x34,
	0x91, 0xa6, 0x81, 0x78, 0x92, 0x7a, 0x59, 0x44, 0xed, 0x19, 0xaf, 0x90, 0xef, 0x5a, 0x89, 0xa7,
	0x96, 0xed, 0x11, 0xfe, 0x3d, 0x54, 0xf8, 0x7f, 0xcb, 0xa0, 0xb9, 0x51, 0xb1, 0x9f, 0x8e, 0xb3,
	0x59, 0xf1, 0x96, 0x5c, 0x34, 0x49, 0x86, 0xd7, 0x92, 0x3f, 0x96, 0xf8, 0x69, 0xb5, 0x3f, 0x3a,
	0x2d, 0x8f, 0x74, 0xce, 0x1f, 0x51, 0x38, 0x41, 0xe1, 0x8e, 0x2b, 0xdd, 0x95, 0x2d, 0xc4, 0x81,
	0x75, 0x3a, 0xe3, 0xe4, 0x1b, 0x7a, 0x71, 0xb5, 0x8e, 0x9f, 0xa3, 0xf1, 0x1e, 0x8e, 0xb6, 0xbd,
	0x88, 0x9e, 0x8e, 0x78, 0x89, 0xa6, 0x87, 0xb2, 0x31, 0x60, 0xdb, 0x89, 0xa8, 0x03, 0x5f, 0x46,
	0x9f, 0xbd, 0xe2, 0x17, 0x0a, 0x14, 0xc8, 0x03, 0xab, 0x00, 0x7f, 0x45, 0x41, 0x9f, 0x0d, 0xaf,
	0xae, 0xb2, 0xda, 0x3f, 0x4c, 0x5e, 0x3e, 0xf1, 0x86, 0x0f, 0xde, 0xf7, 0x4f, 0xff, 0x8a, 0x9a,
	0xe9, 0x9d, 0xd9, 0x90, 0x8a, 0xb7, 0xb9, 0x95, 0x29, 0xa8, 0xcc, 0xa9, 0xeb, 0xbc, 0x6a, 0x18,
	0x74, 0xfa, 0x7d, 0xcd, 0x73, 0xb1, 0xaf, 0xf3, 0x52, 0xb0, 0xbc, 0xbf, 0x60, 0xe3, 0xdb, 0x3f,
	0xfd, 0x78, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x76, 0xd0, 0x41, 0x62, 0x75, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	Outputs(ctx context.Context, in *Request, opts ...grpc.CallOption) (Service_OutputsClient, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Outputs(ctx context.Context, in *Request, opts ...grpc.CallOption) (Service_OutputsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[0], "/falco.outputs.service/outputs", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceOutputsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_OutputsClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type serviceOutputsClient struct {
	grpc.ClientStream
}

func (x *serviceOutputsClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	Outputs(*Request, Service_OutputsServer) error
}

// UnimplementedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (*UnimplementedServiceServer) Outputs(req *Request, srv Service_OutputsServer) error {
	return status.Errorf(codes.Unimplemented, "method Outputs not implemented")
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_Outputs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).Outputs(m, &serviceOutputsServer{stream})
}

type Service_OutputsServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type serviceOutputsServer struct {
	grpc.ServerStream
}

func (x *serviceOutputsServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "falco.outputs.service",
	HandlerType: (*ServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "outputs",
			Handler:       _Service_Outputs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "outputs.proto",
}
